<?xml version="1.0"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:atom="http://www.w3.org/2005/Atom"
		xmlns:c="http://nwalsh.com/rdf/contacts#"
                xmlns:cvs="http://nwalsh.com/rdf/cvs#"
                xmlns:daml="http://www.daml.org/2001/03/daml+oil#"
                xmlns:db="http://docbook.org/ns/docbook"
		xmlns:dbf="http://docbook.org/xslt/ns/extension"
		xmlns:dbm="http://docbook.org/xslt/ns/mode"
                xmlns:dbt="http://docbook.org/xslt/ns/template"
                xmlns:dc='http://purl.org/dc/elements/1.1/'
                xmlns:dcterms="http://purl.org/dc/terms/"
		xmlns:f="http://nwalsh.com/ns/xslfunctions#"
                xmlns:foaf="http://xmlns.com/foaf/0.1/"
                xmlns:gal='http://norman.walsh.name/rdf/gallery#'
                xmlns:geo='http://www.w3.org/2003/01/geo/wgs84_pos#'
                xmlns:html="http://www.w3.org/1999/xhtml"
                xmlns:itin="http://nwalsh.com/rdf/itinerary#"
                xmlns:m="http://docbook.org/xslt/ns/mode"
		xmlns:out="http://docbook.org/xslt/ns/output"
                xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
                xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
                xmlns:skos="http://www.w3.org/2004/02/skos/core#"
                xmlns:t="http://norman.walsh.name/knows/taxonomy#"
                xmlns:tmpl="http://docbook.org/xslt/ns/template"
                xmlns:ttag="http://developers.technorati.com/wiki/RelTag#"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                exclude-result-prefixes="atom db dbf dbm dbt html itin c cvs daml
					 dc dcterms f foaf gal geo
					 m out rdf rdfs skos
					 t tmpl ttag xlink xs"
		version="2.0">

<!--
   xmlns:palm="http://nwalsh.com/rdf/palm#"
   xmlns:p="http://nwalsh.com/rdf/pim#"
-->

<xsl:import href="docbook/stylesheets/base/html/docbook.xsl"/>

<!--
<xsl:import href="docbook/xsl2/base/html/docbook.xsl"/>
<xsl:import href="docbook/xsl2/base/html/chunker.xsl"/>
-->

<!--
<xsl:import href="../2005/projects/examples/flickr.xsl"/>
<xsl:include href="/home/ndw/stylesheets/myFlickrKeys.xsl"/>
<xsl:include href="atom2html.xsl"/>
-->
<xsl:include href="common.xsl"/>
<xsl:include href="itin2html.xsl"/>

<rdf:Description rdf:about=''>
  <rdf:type rdf:resource="http://norman.walsh.name/knows/taxonomy#XSL"/>
  <dc:type rdf:resource='http://purl.org/dc/dcmitype/Text'/>
  <dc:format>application/xsl+xml</dc:format>
  <dc:title>HTML stylesheet for essays</dc:title>
  <dc:date>2005-12-28</dc:date>
  <cvs:date>$Date$</cvs:date>
  <dc:creator rdf:resource='http://norman.walsh.name/knows/who#norman-walsh'/>
  <dc:rights>Copyright &#169; 2005 Norman Walsh. All rights reserved.</dc:rights>
  <dc:description>Convert an NWN essay to HTML.</dc:description>
</rdf:Description>

<xsl:output
    name="out:xhtml"
    method="xhtml"
    encoding="utf-8"
    doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
    indent="no"/>

<xsl:param name="annotation.graphic.open" select="'/graphics/annot-open.png'"/>
<xsl:param name="annotation.graphic.close" select="'/graphics/annot-close.png'"/>
<xsl:param name="offline" select="0"/>

<xsl:param name="linenumbering" as="element()*">
<ln path="literallayout" everyNth="0"/>
<ln path="programlisting" everyNth="0"/>
<ln path="programlistingco" everyNth="0"/>
<ln path="screen" everyNth="0"/>
<ln path="synopsis" everyNth="0"/>
<ln path="address" everyNth="0"/>
</xsl:param>

<!-- Keys -->

<xsl:key name="types" match="rdf:Description" use="rdf:type/@rdf:resource"/>
<xsl:key name="foaf:names" match="rdf:Description" use="foaf:name"/>
<xsl:key name="foaf:nicks" match="rdf:Description" use="foaf:nick"/>
<xsl:key name="wikipedia" match="rdf:Description" use="t:wikipedia"/>
<xsl:key name="rdfs:label" match="rdf:Description" use="rdfs:label"/>
<xsl:key name="rdf:about" match="rdf:Description" use="@rdf:about"/>

<!-- DocBook stylesheet parameters -->

<xsl:param name="admon.graphics" select="1"/>
<xsl:param name="admon.graphics.path" select="'/graphics/'"/>
<xsl:param name="admon.default.titles" select="0"/>
<xsl:param name="annotation-graphic-open" select="'/graphics/annot-open.png'"/>
<xsl:param name="annotation-graphic-close" select="'/graphics/annot-close.png'"/>
<xsl:param name="callout.graphics.path" select="'/graphics/callouts/'"/>
<xsl:param name="table.borders.with.css" select="1"/>
<xsl:param name="funcsynopsis.style" select="'ansi'"/>
<xsl:param name="formal.title.placement" as="element()*">
  <db:figure placement="after"/>
  <db:example placement="after"/>
  <db:equation placement="after"/>
  <db:table placement="before"/>
  <db:procedure placement="before"/>
  <db:task placement="before"/>
</xsl:param>

<xsl:param name="root.elements">
  <db:essay/>
</xsl:param>

<!-- Convenience variables for URIs -->

<xsl:variable name="t:Article"
	      select="'http://norman.walsh.name/knows/taxonomy#Article'"/>

<xsl:variable name="t:Thread"
	      select="'http://norman.walsh.name/knows/taxonomy#Thread'"/>

<xsl:variable name="t:Omit"
	      select="'http://norman.walsh.name/knows/taxonomy#Omit'"/>

<xsl:variable name="t:Travel"
	      select="'http://norman.walsh.name/knows/taxonomy#Travel'"/>

<xsl:variable name="t:OmitTags"
	      select="'http://norman.walsh.name/knows/taxonomy#OmitTags'"/>

<xsl:variable name="skos:Concept"
	      select="'http://www.w3.org/2004/02/skos/core#Concept'"/>

<!-- Variables -->

<xsl:variable name="rdfAllArticles"
	      select="key('types',$t:Article,$allrdf)"/>

<xsl:variable name="rdfOmitArticles"
	      select="$rdfAllArticles[dc:subject[@rdf:resource=$t:Omit]]"/>

<xsl:variable name="sortedArticles" as="element()*">
  <xsl:perform-sort select="$rdfAllArticles except $rdfOmitArticles">
    <xsl:sort select="dcterms:issued" data-type="text" order="ascending"/>
  </xsl:perform-sort>
</xsl:variable>

<xsl:variable name="flickr.xml" select="document('/home/ndw/flickr.xml')"/>

<!-- Templates -->

<xsl:template match="/">
  <xsl:variable name="normalized" as="document-node()"
                select="dbf:cleanup-docbook(/)"/>

  <xsl:variable name="essay" as="element()"
                select="dbf:docbook-root-element($normalized,$rootid)"/>

  <xsl:apply-templates select="$essay" mode="dbm:root"/>
</xsl:template>

<xsl:template match="db:essay" mode="dbm:root">
  <xsl:apply-templates select="."/>
</xsl:template>

<!-- ====================================================================== -->

<xsl:template match="db:x-essay">
  <xsl:message>base: <xsl:value-of select="base-uri()"/></xsl:message>

  <xsl:variable name="filename"
		select="substring-after(base-uri(.), $rooturisl)"/>

  <xsl:variable name="basename"
		select="substring-before(tokenize($filename,'/')[last()],
			                 '.xml')"/>

  <xsl:variable name="about"
		select="concat($hostsl, substring-before($filename, '.xml'))"/>

  <xsl:variable name="article" select="f:get-rdf($about)"/>

  <xsl:variable name="adsense" select="$article/t:adsense"/>

  <xsl:variable name="homep" select="$filename = 'home.xml'"/>

  <xsl:variable name="coverage" select="$article/dc:coverage"/>
  <xsl:variable name="trackId" select="$article/dc:identifier"/>
  <xsl:variable name="subjlist" select="$article/t:subject"/>
  <xsl:variable name="taglist" select="$article/ttag:tag"/>
  <xsl:variable name="replaces" select="$article/dcterms:replaces"/>
  <xsl:variable name="isReplacedBy" select="$article/dcterms:isReplacedBy"/>

  <xsl:variable name="thisPos"
                select="for $idx in (1 to count($sortedArticles))
                        return if ($sortedArticles[$idx]/@rdf:about = $about)
                               then $idx
                               else ()"/>

  <xsl:variable name="this" select="$sortedArticles[$thisPos]"/>
  <xsl:variable name="prev" select="if ($thisPos &gt; 1)
                                    then $sortedArticles[$thisPos - 1]
                                    else ()"/>
  <xsl:variable name="next" select="if ($thisPos &lt; count($sortedArticles))
                                    then $sortedArticles[$thisPos + 1]
                                    else ()"/>

  <xsl:variable name="gmapkey" as="xs:string">
    <xsl:choose>
      <xsl:when test="db:info/db:releaseinfo[@role='gmapkey']">
	<xsl:value-of select="db:info/db:releaseinfo[@role='gmapkey']"/>
      </xsl:when>
      <xsl:when test="contains($about,'/2008/03/26/mappingPhotographs')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRRUhJIzgKmGrpWaHm4UikXmtDXrMBQnr74LNwmmm8d5riiqKc0D0_dAEg</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2008/03/23/biking')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRSM6Uh5M9ckC6fMtV5EbeIp11bqphRUXOm3FNMEXSsgVfA0D95T5YfumA</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2008/02/27/cycling')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRS6o7jyvaXzNML_ou3i1iBwB3CqVRSSpsSKapmK-1b5q1CVDfUe6Vf4Zg</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2006/05/25/amherstMA')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRSLAqI7nfEf5xKv9viEOaHxm15gPRQuZt88kNlYW3n5CZGiJp8GW6EGvw</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2007/04/02/amherstMA')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRS0LQ3lzKTmosheguQX8aY5MN6UkBRUGwfqcfGQt28RKLPKCMbkQGAcNQ</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2007/09/19/')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRSYDghxH0cYdG0Eeq4JdkluAucFhxTyfc38bEjl5e91QERjdV-4yNVWnA</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2007/11/05/')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRSwxFMObgNiI51DOuuRIA8JdeQx2BS59INIwQ5y2nxzWsP9JtSPlPgJsw</xsl:text>
      </xsl:when>
      <xsl:when test="contains($about,'/2010/08/31/mexico')">
	<xsl:text>ABQIAAAAO1qAaQsvBqLxt1nDHmVdXRS5nUuzbPxwtCMMELBcTmapxt4MDhTi8RSeSsrjMM4gIE_crnHz6hcW6g</xsl:text>
      </xsl:when>
      <xsl:when test=".//itin:trip/itin:itinerary/itin:leg[@class='flight']
	              or .//itin:trip/itin:itinerary/itin:leg[@class='train']">
	<xsl:variable name="year"
		      select="substring(.//itin:trip[1]/@startDate,1,4)"/>
	<xsl:value-of select="$gmapkeys[@year=$year]"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="''"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="gmapversion" select="2"/>

  <xsl:variable name="head">
    <head>
      <xsl:if test=".//processing-instruction('trip-summary')|.//itin:trip">
	<xsl:attribute name="profile">
	  <xsl:text>http://www.w3.org/2003/g/data-view</xsl:text>
	</xsl:attribute>
	<link rel="transformation"
	      href="http://www.w3.org/2002/12/cal/glean-hcal.xsl"/>
      </xsl:if>

      <title><xsl:value-of select="db:info/db:title"/></title>

      <xsl:comment>
	<xsl:text>#include virtual="/include/scripts.html"</xsl:text>
      </xsl:comment>

      <xsl:comment>
	<xsl:text>#include virtual="/include/csslinks.html"</xsl:text>
      </xsl:comment>

      <xsl:if test="db:info/gal:banner">
	<style type="text/css">
#banner {
  background-image: url("<xsl:value-of select="db:info/gal:banner[1]/@rdf:resource"/>.jpg") !important;
	</style>
      </xsl:if>

      <xsl:if test="$homep">
	<link rel="stylesheet" type="text/css" href="/css/atom.css"/>
	<link rel="openid.server" href="https://pip.verisignlabs.com/server"/>
	<link rel="openid.delegate" href="http://ndw.pip.verisignlabs.com/"/>
        <link rel="pavatar" href="pavatar.png"/>
      </xsl:if>

      <meta name="foaf:maker" content="foaf:mbox mailto:ndw@nwalsh.com"/>
      <meta name="DC.title" content="{db:info/db:title}"/>
      <link rel="alternate" type="application/rdf+xml" title="Essay metadata"
	    href="{$basename}.rdf"/>

      <link rel="alternate" type="application/docbook+xml" title="XML"
	    href="{concat($basename,'.xml')}"/>
      <!-- no more pdf
      <link rel="alternate" type="application/pdf" title="PDF"
	    href="{concat($basename,'.pdf')}"/>
      -->

      <xsl:if test="processing-instruction('nwn.doap')">
	<link rel="meta" type="application/rdf+xml" title="DOAP"
	      href="{concat($basename, '.doap')}"/>
	<link rel="alternate" type="application/rdf+xml" title="DOAP"
	      href="{concat($basename, '.doap')}"/>
      </xsl:if>

      <xsl:if test="$homep">
	<link rel="meta" type="application/rdf+xml" title="FOAF" href="/foaf"/>
	<link rel="alternate" type="application/atom+xml"
	      title="Atom"
	      href="http://norman.walsh.name/atom/whatsnew.xml"/>
	<link rel="alternate" type="application/atom+xml"
	      title="Atom (full content)"
	      href="http://norman.walsh.name/atom/whatsnew-fulltext.xml"/>
      </xsl:if>

      <xsl:choose>
        <xsl:when test="db:info/geo:lat">
          <meta name="ICBM">
            <xsl:attribute name="content">
              <xsl:value-of select="db:info/geo:lat"/>
              <xsl:text>,</xsl:text>
              <xsl:value-of select="db:info/geo:long"/>
            </xsl:attribute>
          </meta>
        </xsl:when>
        <xsl:otherwise>
	  <xsl:for-each select="$coverage">
	    <xsl:variable name="where"
			  select="f:get-rdf(.)"/>
	    <xsl:if test="$where and $where/geo:lat">
	      <meta name="ICBM">
		<xsl:attribute name="content">
		  <xsl:value-of select="$where/geo:lat"/>
		  <xsl:text>,</xsl:text>
		  <xsl:value-of select="$where/geo:long"/>
		</xsl:attribute>
	      </meta>
	    </xsl:if>
	  </xsl:for-each>
	</xsl:otherwise>
      </xsl:choose>

      <link rel="icon" href="/graphics/nwn.png" type="image/png"/>

      <link rel="home" href="/" title="NWN"/>
      <link rel="contents" title="Contents" href="/dates.html" />
      <link rel="index" title="Index" href="/subjects.html" />

      <xsl:if test="not($homep)">
        <link rel="up" href="/" title="Up" />

	<link rel="first" title="First"
	      href="{substring-after($sortedArticles[1]/@rdf:about,$host)}"/>

        <xsl:if test="$prev">
	  <link rel="prev"
		title="{$prev/dc:title}"
		href="{f:link-uri($prev/@rdf:about)}"/>
	</xsl:if>

	<xsl:choose>
	  <xsl:when test="empty($thisPos)">
	    <!-- nop -->
	  </xsl:when>
	  <xsl:when test="$next">
            <link rel="next"
                  title="{$next/dc:title}"
		  href="{f:link-uri($next/@rdf:about)}"/>
	  </xsl:when>
	  <xsl:otherwise>
            <link rel="next" title="Next">
	      <xsl:attribute name="href">
		<xsl:text>/cgi-bin/nav?about=</xsl:text>
		<xsl:value-of select="substring-after($about, $host)"/>
		<xsl:text>&amp;page=next</xsl:text>
	      </xsl:attribute>
            </link>
	  </xsl:otherwise>
	</xsl:choose>
      
	<link rel="last" title="Last">
	  <xsl:attribute name="href">
	    <xsl:text>/cgi-bin/nav?about=</xsl:text>
	    <xsl:value-of select="substring-after($about, $host)"/>
	    <xsl:text>&amp;page=last</xsl:text>
	  </xsl:attribute>
	</link>
      </xsl:if>

      <xsl:if test="$homep">
	<xsl:variable name="atom"
		      select="document(concat($root,'/atom/whatsnew.xml'))"/>
	<xsl:for-each select="$atom//atom:entry">
	  <xsl:variable name="href"
			select="atom:link[@rel='alternate'
				and @type='text/html'][1]/@href"/>
	  <link rel="chapter" title="{atom:title}"
		href="{substring-after($href, $host)}"/>
	</xsl:for-each>
	<xsl:comment> This site is mine, mine, all mine. </xsl:comment>
	<xsl:comment> ukey="6C33190C" </xsl:comment>
      </xsl:if>

      <xsl:for-each select=".//db:section">
	<link rel="section" href="#{@xml:id}"
	      title="{string(db:info/db:title)}"/>
      </xsl:for-each>

      <xsl:apply-templates select="db:info/html:*"/>

      <xsl:if test="//db:annotation">
	<script type="text/javascript" src="/script/annotation.js"/>
      </xsl:if>

      <!-- Google Trip Maps -->
      <xsl:if test="$gmapkey != ''">
	<style type="text/css">v\:* { behavior:url(#default#VML); }</style>
	<script type="text/javascript">
	  <xsl:attribute name="src">
	    <xsl:text>http://maps.google.com/maps?</xsl:text>
	    <xsl:text>file=api&amp;v=</xsl:text>
	    <xsl:value-of select="$gmapversion"/>
	    <xsl:text>&amp;key=</xsl:text>
	    <xsl:value-of select="$gmapkey"/>
	  </xsl:attribute>
	</script>

	<xsl:if test=".//itin:trip/itin:itinerary/itin:leg[@class='flight']
	              or .//itin:trip/itin:itinerary/itin:leg[@class='train']">
	  <script src="/script/MapUtils.js" type="text/javascript"/>
	  <script src="/script/FlightMap.js" type="text/javascript"/>
	</xsl:if>
      </xsl:if>
    </head>
  </xsl:variable>

  <xsl:variable name="body">
    <body>
      <xsl:if test="$gmapkey != ''
		    and (.//itin:trip/itin:itinerary/itin:leg[@class='flight']
		         or .//itin:trip/itin:itinerary/itin:leg[@class='train'])">
	<xsl:attribute name="onload" select="'Plot();'"/>
      </xsl:if>

      <div id="banner">
	<div id="header">
	  <xsl:choose>
	    <xsl:when test="$homep">
	      <a href="/dates">Archive</a>
	      <span class="div"> / </span>
	      <a href="/topics">Topics</a>
	      <span class="div"> / </span>
	      <a href="/subjects">Subjects</a>
	      <span class="div"> / </span>
	      <a href="/tags">Tags</a>
	      <span class="div"> / </span>
	      <a href="/coverage">Geo</a>
	    </xsl:when>
	    <xsl:otherwise>
	      <xsl:if test="$prev">
		<a href="{f:link-uri($prev/@rdf:about)}">←</a>
		<span class="div"> / </span>
	      </xsl:if>

	      <a href="/">Norman.Walsh.name</a>

	      <xsl:choose>
		<xsl:when test="$next">
		  <span class="div"> / </span>
		  <a href="{f:link-uri($next/@rdf:about)}">→</a>
		</xsl:when>
		<xsl:when test="empty($thisPos)">
		  <!-- nop -->
		</xsl:when>
		<xsl:otherwise>
		  <!-- work it out with Ajax -->
		  <span id="nextlink"/>
		</xsl:otherwise>
	      </xsl:choose>
	    </xsl:otherwise>
	  </xsl:choose>
	</div>
	<h1>
	  <xsl:value-of select="db:info/db:title"/>
	</h1>

	<h2>
	  <xsl:if test="db:info/db:volumenum">
	    <span class="serial">
	      <xsl:text>Volume </xsl:text>
	      <xsl:value-of select="db:info/db:volumenum"/>
	      <xsl:if test="db:info/db:issuenum">
		<xsl:text>, </xsl:text>
		<xsl:text>Issue </xsl:text>
		<xsl:value-of select="db:info/db:issuenum"/>
	      </xsl:if>
	      <xsl:text>; </xsl:text>
	    </span>
	  </xsl:if>

	  <xsl:choose>
	    <xsl:when test="$homep">
	      <span class="pubdate">
		<xsl:call-template name="print-date">
		  <xsl:with-param name="date" select="string(current-date())"/>
		</xsl:call-template>
	      </span>
	    </xsl:when>

	    <xsl:when test="db:info/db:pubdate">
	      <xsl:variable name="pubdate">
		<xsl:call-template name="print-date">
		  <xsl:with-param name="date" select="db:info/db:pubdate[1]"/>
		</xsl:call-template>
	      </xsl:variable>

	      <xsl:variable name="moddate">
		<xsl:call-template name="print-date">
		  <xsl:with-param name="date"
			  select="substring($article/dcterms:modified,1,10)"/>
		</xsl:call-template>
	      </xsl:variable>

	      <span class="pubdate">
		<xsl:value-of select="$pubdate"/>

		<xsl:if test="$pubdate != $moddate">
		  <span class="small">
		    <xsl:text> (modified </xsl:text>
		    <xsl:value-of select="$moddate"/>
		    <xsl:text>)</xsl:text>
		  </span>
		</xsl:if>
	      </span>
	    </xsl:when>
	  </xsl:choose>
	</h2>

	<xsl:if test="$homep">
	  <!-- work it out with ajax -->
	  <div id="tweet"/>
	</xsl:if>

	<xsl:if test="$isReplacedBy">
	  <h3>This essay <a href="#replacedby">has been superceded</a>.</h3>
	</xsl:if>
      </div>

      <xsl:comment>#include virtual="/include/search.html"</xsl:comment>

      <div id="content">
	<div class="abstract">
	  <xsl:if test="db:info/db:abstract">
	    <xsl:apply-templates select="db:info/db:abstract/db:para"/>
	  </xsl:if>
	</div>

	<xsl:apply-templates/>
	
	<xsl:if test="$homep">
	  <xsl:variable name="atom"
			select="document(concat($root,'/atom/whatsnew.xml'))"/>

	  <div class="rss">
	    <xsl:apply-templates select="$atom/atom:feed/atom:entry"
				 mode="atom"/>
	  </div>
	</xsl:if>

	<xsl:call-template name="tmpl:process-footnotes"/>

	<xsl:if test="$article/t:talkback = 'yes'">
	  <xsl:comment>
	    <xsl:text>#include virtual="/</xsl:text>
	    <xsl:value-of select="substring-before($filename, '.xml')"/>
	    <xsl:text>.comments.html"</xsl:text>
	  </xsl:comment>
	  <div id="newcomment"/>
	</xsl:if>

	<div class="footer">
	  <xsl:if test="db:info/db:date">
	    <!-- <date>$Date$</date> -->
	    <div class="moddate">
	      <xsl:variable name="datestr"
			    select="$article/dcterms:modified"/>
	      <xsl:variable name="date">
		<xsl:choose>
		  <xsl:when test="$datestr castable as xs:dateTime">
		    <xsl:value-of 
			select="adjust-dateTime-to-timezone(xs:dateTime($datestr),
				                            implicit-timezone())"/>
		  </xsl:when>
		  <xsl:otherwise>
		    <xsl:message>
		      <xsl:text>Warning: uncastable date: </xsl:text>
		      <xsl:value-of select="$datestr"/>
		    </xsl:message>
		    <xsl:value-of select="xs:dateTime('2005-01-01T12:00:00Z')"/>
		  </xsl:otherwise>
		</xsl:choose>
	      </xsl:variable>

	      <xsl:text>Last modified: </xsl:text>
	      <xsl:value-of
		  select="format-dateTime($date,
			             '[FNn,*-3], [D01] [MNn,*-3] [Y0001]')"/>
	    </div>

	    <xsl:for-each select="$replaces">
	      <xsl:variable name="repl-rsrc" select="f:get-rdf(.)"/>
	      <div class="isversionof">
		<xsl:text>This essay supersedes </xsl:text>
		<i class="citetitle">
		  <a href="{$repl-rsrc/@rdf:about}">
		    <xsl:value-of select="$repl-rsrc/dc:title"/>
		  </a>
		  <xsl:text> (</xsl:text>
		  <xsl:call-template name="print-date">
		    <xsl:with-param name="date" select="$repl-rsrc/dc:date"/>
		  </xsl:call-template>
		  <xsl:text>)</xsl:text>
		</i>
	      </div>
	    </xsl:for-each>

	    <xsl:for-each select="$isReplacedBy">
	      <xsl:variable name="isrepl-rsrc" select="f:get-rdf(.)"/>
	      <div id="replacedby" class="isversionof">
		<xsl:text>This essay is superseded by </xsl:text>
		<i class="citetitle">
		  <a href="{$isrepl-rsrc/@rdf:about}">
		    <xsl:value-of select="$isrepl-rsrc/dc:title"/>
		  </a>
		  <xsl:text> (</xsl:text>
		  <xsl:call-template name="print-date">
		    <xsl:with-param name="date" select="$isrepl-rsrc/dc:date"/>
		  </xsl:call-template>
		  <xsl:text>)</xsl:text>
		</i>
	      </div>
	    </xsl:for-each>
	  </xsl:if>

	  <xsl:comment>#include virtual="/include/footer.html"</xsl:comment>
	</div>
      </div>

      <xsl:for-each select="db:info/gal:footer">
	<div class="banner">
	  <img src="{@rdf:resource}.jpg"
	       alt="[Footer Graphic]"/>
	</div>
      </xsl:for-each>

      <div id="sidebar">
	<div id="close"></div>

	<xsl:if test="not($homep)">
	  <xsl:comment>
	    <xsl:text>#include virtual="/</xsl:text>
	    <xsl:value-of select="substring-before($filename, '.xml')"/>
	    <xsl:text>.seealso.html"</xsl:text>
	  </xsl:comment>
	</xsl:if>

	<xsl:if test="not($subjlist[@rdf:resource = $t:OmitTags])">
	  <xsl:comment>
	    <xsl:text>#include virtual="/</xsl:text>
	    <xsl:value-of select="substring-before($filename, '.xml')"/>
	    <xsl:text>.tags.html"</xsl:text>
	  </xsl:comment>
	</xsl:if>

	<xsl:if test="$subjlist[@rdf:resource = $t:Travel]
		      and $subjlist[@rdf:resource = $t:Omit]">
	  <!-- must be an itinerary -->
	  <h3>Itineraries</h3>
	  <div class="homelinks">
	    <xsl:comment>#include virtual="/include/upcoming.html"</xsl:comment>
	  </div>
	</xsl:if>

	<xsl:choose>
	  <xsl:when test="$adsense = 'yes'">
	    <xsl:comment>#include virtual="/include/adsense.html"</xsl:comment>
	  </xsl:when>
	  <xsl:when test="$homep">
	    <!-- nop -->
	  </xsl:when>
	</xsl:choose>

	<xsl:choose>
	  <xsl:when test="$homep">
	    <xsl:comment>#include virtual="/include/snap.html"</xsl:comment>
	  </xsl:when>
	  <xsl:when test="$subjlist[@rdf:resource = $t:Omit]">
	    <!-- nop -->
	  </xsl:when>
	  <xsl:otherwise>
	    <div class='ontheweb'>
	      <h3>On the web:</h3>
	      <dl>
		<dt>
		  <a title="Find related stories via Technorati"
		     href="http://technorati.com/cosmos/search.html?url={$about}">
		    <img class="icon" src="/graphics/otw-technorati.png"
			 height="16" width="16" border="0"
			 alt="Find related stories via Technorati"/>
		  </a>
		  <xsl:text>&#160;</xsl:text>
		  <a title="Find related stories via Technorati"
		     href="http://technorati.com/cosmos/search.html?url={$about}">related</a>
		</dt>

		<dt>
		  <a href="http://del.icio.us/post?url={$about}&amp;title={encode-for-uri(db:info/db:title)}"
		     title="Bookmark {db:info/db:title} in del.icio.us">
		    <img class="icon" src="/graphics/otw-delicious.gif"
			 alt="del.icio.us" height="16" width="16" border="0"/>
		    </a>
		    <xsl:text>&#160;</xsl:text>
		    <a href="http://del.icio.us/post?url={$about}&amp;title={encode-for-uri(db:info/db:title)}"
		       title="Bookmark {db:info/db:title} on del.icio.us">bookmark it!</a>
		</dt>

		<dt>
		  <a href="http://www.digg.com/submit?url={$about}&amp;phase=2"
		     title="digg this post">
		    <img class="icon" src="/graphics/otw-digman.gif"
			 height="16" width="16"
			 alt="Submit {encode-for-uri(db:info/db:title)} to digg.com"
			 border="0"/>
		  </a>
		  <xsl:text>&#160;</xsl:text>
		  <a href="http://www.digg.com/submit?url={$about}&amp;phase=2"
		     title="digg this post">digg it!</a>
		</dt>

		<dt>
		  <a href="http://reddit.com/submit?url={$about}&amp;title={encode-for-uri(db:info/db:title)}"
		     title="Post {encode-for-uri(db:info/db:title)} to reddit">
		    <img class="icon" src="/graphics/otw-reddithead.png"
			 alt="reddit" height="16" width="16" border="0"/>
		  </a>
		  <xsl:text>&#160;</xsl:text>
		  <a href="http://reddit.com/submit?url={$about}&amp;title={encode-for-uri(db:info/db:title)}"
		     title="Post {db:info/db:title} to reddit">reddit!</a>
		</dt>
	      </dl>
	    </div>
	  </xsl:otherwise>
	</xsl:choose>

	<xsl:if test="$homep">
	  <div class="links">
	    <xsl:comment>#include virtual="/include/homelinks.html"</xsl:comment>
	  </div>
	</xsl:if>

	<xsl:apply-templates mode="sidebar"/>
      </div>
    </body>
  </xsl:variable>

  <html>
    <xsl:if test="$gmapkey != ''">
      <xsl:namespace name="v" select="'urn:schemas-microsoft-com:vml'"/>
    </xsl:if>
    <xsl:copy-of select="$head"/>
    <xsl:copy-of select="$body"/>
  </html>
</xsl:template>

<xsl:template match="db:essay">
  <body>
    <div id="content">
      <div class="abstract">
        <xsl:if test="db:info/db:abstract">
          <xsl:apply-templates select="db:info/db:abstract/db:para"/>
        </xsl:if>
      </div>

      <xsl:apply-templates/>

      <xsl:call-template name="tmpl:process-footnotes"/>
    </div>
  </body>
</xsl:template>

<xsl:template match="db:info"/>

<!-- ============================================================ -->

<xsl:template match="db:textdata">
  <xsl:variable name="filename">
    <xsl:choose>
      <xsl:when test="@entityref">
        <xsl:value-of select="unparsed-entity-uri(@entityref)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="resolve-uri(@fileref,.)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="encoding">
    <xsl:choose>
      <xsl:when test="@encoding">
        <xsl:value-of select="@encoding"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$textdata.default.encoding"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <!-- this allows "/foo" to work both on my local build and on the web -->
  <xsl:variable name="readFrom">
    <xsl:choose>
      <xsl:when test="starts-with($filename, '/')">
	<xsl:value-of select="concat($rooturi, $filename)"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$filename"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:value-of select="if ($encoding = '')
			then unparsed-text($readFrom)
			else  unparsed-text($readFrom,$encoding)"/>
</xsl:template>

<!-- ====================================================================== -->

<xsl:template match="gal:image|gal:graphic">
  <xsl:param name="source"/>
  <xsl:param name="about"/>

  <xsl:variable name="path">
    <xsl:choose>
      <xsl:when test="@base">
        <xsl:value-of select="@base"/>
      </xsl:when>
      <xsl:otherwise>images/</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <div class="photos">
    <xsl:call-template name="image">
      <xsl:with-param name="rsrc" select="@rdf:resource"/>
      <xsl:with-param name="path" select="$path"/>
      <xsl:with-param name="caption" select="not(self::gal:graphic)"/>
    </xsl:call-template>
  </div>
</xsl:template>

<xsl:template match="gal:images">
  <xsl:param name="source"/>
  <xsl:param name="about"/>

  <xsl:variable name="path">
    <xsl:choose>
      <xsl:when test="@base">
        <xsl:value-of select="@base"/>
      </xsl:when>
      <xsl:otherwise>images/</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <div class="photos">
    <xsl:for-each select="rdf:Seq/rdf:li">
      <xsl:call-template name="image">
        <xsl:with-param name="rsrc" select="@rdf:resource"/>
        <xsl:with-param name="pos" select="position()"/>
        <xsl:with-param name="path" select="$path"/>
      </xsl:call-template>
    </xsl:for-each>
  </div>
</xsl:template>

<xsl:template name="image">
  <xsl:param name="rsrc"/>
  <xsl:param name="pos" select="0"/>
  <xsl:param name="path" select="''"/>
  <xsl:param name="caption" select="true()"/>

  <xsl:variable name="filename"
		select="substring-after(base-uri(), $rooturisl)"/>

  <xsl:variable name="about"
                select="concat($hostsl, f:file-path($filename), '/', $rsrc)"/>

  <xsl:variable name="basename" select="tokenize($about,'/')[last()]"/>

  <div>
    <xsl:attribute name="class">
      <xsl:choose>
	<xsl:when test="$pos = 1">firstphoto</xsl:when>
        <xsl:otherwise>photo</xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>

    <xsl:variable name="desc" select="f:get-rdf($about)"/>

    <xsl:if test="count($desc) = 0 or count($desc/*) = 0">
      <xsl:message>
        <xsl:text>No description for </xsl:text>
        <xsl:value-of select="$about"/>
        <xsl:text> (</xsl:text>
        <xsl:value-of select="$path"/>
        <xsl:text>)</xsl:text>
      </xsl:message>
    </xsl:if>

    <a href="images/{$basename}.html">
      <img align="left" border="0" alt="[Image]">
        <xsl:attribute name="src">
          <xsl:if test="$path = ''">../</xsl:if>
          <xsl:text>thumbs/</xsl:text>
          <xsl:value-of select="$basename"/>
        </xsl:attribute>
      </img>
    </a>

    <xsl:if test="$caption and
	          ($desc/dc:title|$desc/dc:description|$desc/rdfs:comment)">
      <div class="photoinfo">
        <h3>
          <xsl:choose>
            <xsl:when test="$desc/dc:title">
              <xsl:value-of select="$desc/dc:title"/>
            </xsl:when>
            <xsl:otherwise>Untitled</xsl:otherwise>
          </xsl:choose>
        </h3>
        <xsl:if test="$desc/dc:description">
          <p class="description">
            <xsl:value-of select="$desc/dc:description"/>
          </p>
        </xsl:if>
      </div>
    </xsl:if>

    <br clear="all"/>
  </div>
</xsl:template>

<xsl:template match="gal:photo">
  <!-- The difference between a photo and an image is in the presentation -->
  <!-- of the thumbnail on the main page. Photos are "full width" -->

  <xsl:variable name="path">
    <xsl:choose>
      <xsl:when test="@base">
        <xsl:value-of select="@base"/>
      </xsl:when>
      <xsl:otherwise>images/</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <div class="artwork">
    <xsl:variable name="filename"
                  select="substring-after(base-uri(), $rooturisl)"/>

    <xsl:variable name="about"
		  select="concat($hostsl, f:file-path($filename),
			         '/', @rdf:resource)"/>

    <xsl:variable name="basename" select="tokenize($about,'/')[last()]"/>

    <xsl:variable name="desc" select="f:get-rdf($about)"/>

    <xsl:if test="count($desc) = 0 or count($desc/*) = 0">
      <xsl:message>
        <xsl:text>No description for </xsl:text>
        <xsl:value-of select="$about"/>
        <xsl:text> (</xsl:text>
        <xsl:value-of select="$path"/>
        <xsl:text>)</xsl:text>
      </xsl:message>
    </xsl:if>

    <a href="images/{$basename}.html">
      <img border="0" alt="[Photo]">
        <xsl:attribute name="src">
          <xsl:if test="$path = ''">../</xsl:if>
          <xsl:text>thumbs/</xsl:text>
          <xsl:value-of select="$basename"/>
        </xsl:attribute>
      </img>
    </a>

    <xsl:if test="$desc/dc:title|$desc/dc:description|$desc/rdfs:comment">
      <div class="artinfo">
        <h3>
          <xsl:choose>
            <xsl:when test="$desc/dc:title">
              <xsl:value-of select="$desc/dc:title"/>
            </xsl:when>
            <xsl:otherwise>Untitled</xsl:otherwise>
          </xsl:choose>
        </h3>
        <xsl:if test="$desc/dc:description">
          <p class="description">
            <xsl:value-of select="$desc/dc:description"/>
          </p>
        </xsl:if>
      </div>
    </xsl:if>
  </div>
</xsl:template>

<xsl:template match="db:mediaobject[@role='flickr']" priority="100">
  <xsl:variable name="uri" select="db:imageobject/@xlink:href"/>
  <xsl:variable name="jpg" select="db:imageobject/db:imagedata/@fileref"/>

  <xsl:variable name="jpgfn"
		select="substring-after(substring-after($jpg,'http://'),'/')"/>

  <xsl:variable name="photoId"
		select="substring-before(substring-after($uri,'/photos/ndw/'),
			                 '/')"/>

  <xsl:variable name="photo" as="element()?"
		select="$flickr.xml/photos/photo[@id=$photoId]"/>

  <xsl:variable name="flickr.width"
		select="$photo/sizes/size[@label='Medium']/@width"/>

  <!--
  <xsl:message>
    <xsl:value-of select="$photoId"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$flickr.width"/>
  </xsl:message>
  -->

  <xsl:variable name="width">
    <xsl:choose>
      <xsl:when test="string($flickr.width) = ''">
	<xsl:message>
	  <xsl:text>Failed to get width for photo in flickr.xml: </xsl:text>
	  <xsl:value-of select="$jpg"/>
	</xsl:message>
	<xsl:value-of select="500"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$flickr.width"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="title" select="$photo/title"/>
  <xsl:variable name="desc" select="$photo/description"/>

  <xsl:variable name="t_geotagged"
		select="$photo/tags/tag[@raw='geotagged']"/>
  <xsl:variable name="t_geolat"
		select="$photo/tags/tag[starts-with(@raw,'geo:lat=')]"/>
  <xsl:variable name="t_geolong"
		select="$photo/tags/tag[starts-with(@raw,'geo:long=')]"/>

  <xsl:variable name="geotagged"
		select="$t_geotagged and $t_geolat and $t_geolong"/>

  <xsl:variable name="geo:lat" as="xs:decimal"
		select="if ($t_geotagged and $t_geolat)
                        then xs:decimal(substring-after($t_geolat/@raw,'='))
                        else 0.0"/>

  <xsl:variable name="geo:long" as="xs:decimal"
		select="if ($t_geotagged and $t_geolong)
                        then xs:decimal(substring-after($t_geolong/@raw,'='))
                        else 0.0"/>

  <div class="artwork">
    <div class="flickr-photo">
      <div class="photo" style="width: {$width}px">
	<a href="{$uri}">
	  <img border="0" alt="[Photo]" src="{$jpg}"/>
	</a>
      </div>

      <xsl:choose>
	<xsl:when test="$geotagged">
	  <div class="link" style="left: {round($width div 2.0) - 40}px;">
	    <a href="http://www.flickr.com/">
	      <img src="/graphics/flickrt.png" border="0" alt="[Flickr]"/>
	    </a>
	    <xsl:text> </xsl:text>
	    <a href="http://maps.google.com/maps?ll={$geo:lat},{$geo:long}&amp;z=16&amp;t=k">
	      <!--iPhotoID={$photoId}&amp;-->
	      <img src="/graphics/map.png" border="0" alt="[Google maps]"/>
	    </a>
	  </div>
	</xsl:when>
	<xsl:otherwise>
	  <div class="link" style="left: {round($width div 2.0) - 25}px;">
	    <a href="http://www.flickr.com/">
	      <img src="/graphics/flickrt.png" border="0" alt="[Flickr]"/>
	    </a>
	  </div>
	</xsl:otherwise>
      </xsl:choose>

      <h3>
	<xsl:value-of select="$title[1]"/>
      </h3>

      <xsl:if test="$desc != ''">
	<div class="description">
	  <p>
	    <xsl:value-of select="$desc[1]"/>
	  </p>
	</div>
      </xsl:if>
    </div>
  </div>
</xsl:template>

<xsl:template match="db:mediaobject[@role='youtube']" priority="100">
  <xsl:variable name="uri" select="db:videoobject/db:videodata/@fileref"/>
  <xsl:variable name="width" select="db:videoobject/db:videodata/@width"/>
  <xsl:variable name="height" select="db:videoobject/db:videodata/@depth"/>

  <object width="{$width}" height="{$height}">
    <param name="movie" value="{$uri}"/>
    <embed src="{$uri}" type="application/x-shockwave-flash"
	   width="{$width}" height="{$height}"/>
  </object>
</xsl:template>

<xsl:template match="gal:float">
  <xsl:variable name="path">
    <xsl:choose>
      <xsl:when test="@base">
        <xsl:value-of select="@base"/>
      </xsl:when>
      <xsl:otherwise>images/</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="rsrc" select="@rdf:resource"/>
  <xsl:variable name="float">
    <xsl:choose>
      <xsl:when test="@align"><xsl:value-of select="@align"/></xsl:when>
      <xsl:otherwise>left</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="filename"
		select="substring-after(base-uri(), $rooturisl)"/>

  <xsl:variable name="about"
                select="concat($hostsl, f:file-path($filename), '/', $rsrc)"/>

  <xsl:variable name="basename" select="tokenize($about,'/')[last()]"/>

  <a href="images/{$basename}.html">
    <img align="{$float}" border="0" alt="[Image]">
      <xsl:attribute name="src">
        <xsl:if test="$path = ''">../</xsl:if>
        <xsl:text>thumbs/</xsl:text>
        <xsl:value-of select="$basename"/>
      </xsl:attribute>
    </img>
  </a>
</xsl:template>

<xsl:template match="processing-instruction('include')">
  <xsl:comment>#include <xsl:value-of select="."/></xsl:comment>
</xsl:template>

<xsl:template match="processing-instruction('bloglines-blogroll')">
  <xsl:variable name="id" select="dbf:pi(.,'id')"/>
  <xsl:variable name="folder" select="dbf:pi(.,'folder')"/>
  <script language="javascript" type="text/javascript"
	  src="http://rpc.bloglines.com/blogroll?id={$id}&amp;folder={$folder}"/>
</xsl:template>

<xsl:template match="processing-instruction('x-html')">
  <xsl:variable name="uri" select="dbf:pi(.,'uri')"/>
  <xsl:variable name="html" select="document($uri,.)"/>
  <xsl:copy-of select="$html"/>
</xsl:template>

<xsl:template match="processing-instruction('subject-feeds')">
  <!-- nop; only produces output in sidebar mode -->
</xsl:template>

<!-- ====================================================================== -->

<xsl:template match="db:tag">
  <xsl:choose>
    <!-- grotesque hack to get around programlisting reformatting over linebreaks -->
    <xsl:when test="starts-with(string(.), ' ')
		    or starts-with(string(.), '&#9;')">
      <xsl:apply-templates/>
    </xsl:when>
    <xsl:when test="not(@class)">
      <xsl:call-template name="format-tag">
        <xsl:with-param name="class" select="'starttag'"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="format-tag"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="db:section">
  <!-- Sections that start with an initial para are run-in -->
  <xsl:choose>
    <xsl:when test="db:para[1]/preceding-sibling::db:info">
      <div class="section">
	<xsl:apply-templates select="*[not(self::db:info)]"/>
      </div>
    </xsl:when>
    <xsl:otherwise>
      <xsl:apply-imports/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="db:section/db:para[1]" priority="100">
  <xsl:choose>
    <xsl:when test="preceding-sibling::db:info">
      <h2 class="runin">
	<xsl:value-of select="preceding-sibling::db:info/db:title"/>
	<xsl:text>&#160;</xsl:text>
      </h2>
      <p class="runin" id="{@xml:id}">
	<xsl:if test="../@xml:id">
	  <a id="{../@xml:id}"/>
	</xsl:if>
	<xsl:apply-templates/>
      </p>
      <xsl:if test="not(following-sibling::db:para)">
	<p>
	  <xsl:comment> This is just a spacer </xsl:comment>
	</p>
      </xsl:if>
    </xsl:when>
    <xsl:otherwise>
      <xsl:next-match/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!--
<xsl:template match="db:epigraph">
  <div class="{local-name(.)}">
    <xsl:apply-templates select="*[not(self::db:attribution)]"/>
    <xsl:if test="db:attribution">
      <div class="attribution">
	<span>—<xsl:apply-templates select="db:attribution"/></span>
      </div>
    </xsl:if>
  </div>
</xsl:template>
-->

<xsl:template match="db:personname">
  <xsl:variable name="pname" as="element()">
    <db:personname>
      <xsl:for-each select="node()">
	<xsl:choose>
	  <xsl:when test=". instance of element() and @role = 'suppress'">
	    <!-- nop -->
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:copy-of select="."/>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:for-each>
    </db:personname>
  </xsl:variable>

  <xsl:call-template name="dbt:inline-charseq">
    <xsl:with-param name="content">
      <xsl:call-template name="person-name">
	<xsl:with-param name="node" select="$pname"/>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="db:blockquote[@role='rant']">
  <div class="rant">
    <xsl:if test="@xml:lang">
      <xsl:call-template name="lang-attribute"/>
    </xsl:if>
    <xsl:call-template name="id"/>

    <blockquote class="{local-name(.)}">
      <div><b><i>&lt;rant&gt;</i></b></div>
      <xsl:apply-templates/>
      <div><b><i>&lt;/rant&gt;</i></b></div>
    </blockquote>
  </div>
</xsl:template>

<xsl:template match="processing-instruction('nwn-stylesheet')">
  <xsl:processing-instruction name="xml-stylesheet">
    <xsl:value-of select="."/>
  </xsl:processing-instruction>
</xsl:template>

<xsl:template match="db:date">
  <xsl:value-of select="substring(., 9, 2)"/>
  <xsl:text>&#160;</xsl:text>
  <xsl:call-template name="month-name">
    <xsl:with-param name="month" select="xs:decimal(substring(., 6, 2))"/>
  </xsl:call-template>
  <xsl:text>&#160;</xsl:text>
  <xsl:value-of select="substring(., 1, 4)"/>
</xsl:template>

<xsl:template match="db:para[@xlink:actuate='onLoad']" priority="100">
  <div class="artwork" id="{@xml:id}" style="width: 540px; height: 540px;"/>
  <script type="text/javascript" src="/script/gmapfunc.js"></script>
  <script type="text/javascript">
    <xsl:value-of select="unparsed-text(@xlink:href)"/>
  </script>
  <div id="mapmarks"/>
</xsl:template>

<xsl:template match="db:phrase[@revisionflag='deleted']">
  <del>
    <xsl:apply-templates/>
  </del>
</xsl:template>

<xsl:template match="db:application[@revisionflag='deleted']">
  <del>
    <xsl:apply-imports/>
  </del>
</xsl:template>

<xsl:template match="db:phrase[@role='install']">
  <p class='install'>
    <xsl:call-template name="id"/>
    <xsl:apply-templates/>
  </p>
</xsl:template>

<xsl:template match="db:phrase[@role='bubble']">
  <span class="thoughtbubble">
    <tt>.oO(</tt>
    <xsl:apply-templates/>
    <tt>)</tt>
  </span>
</xsl:template>

<xsl:template match="db:phrase[@role='censored']">
  <span class="censored">
    <xsl:apply-templates/>
  </span>
</xsl:template>

<xsl:template match="html:*" priority="200">
  <xsl:element name="{local-name(.)}">
    <xsl:copy-of select="@*"/>
    <xsl:apply-templates/>
  </xsl:element>
</xsl:template>

<!-- ====================================================================== -->

<xsl:template match="db:link">
  <xsl:variable name="puburi"
		select="concat($host,substring-after(base-uri(.),'.name'))"/>

  <xsl:variable name="href"
		select="if (@xlink:href)
			then iri-to-uri(resolve-uri(@xlink:href,$puburi))
			else ''"/>

  <xsl:message>
    <xsl:value-of select="$puburi"/>
    <xsl:value-of select="$href"/>
    <xsl:value-of select="@xlink:href"/>
  </xsl:message>

  <xsl:variable name="title" select="'FIXME:'"/>

  <xsl:choose>
    <xsl:when test="starts-with($href,$host) and $title != ''">
      <xsl:call-template name="db:link">
	<xsl:with-param name="title" select="$title"/>
	<xsl:with-param name="href" select="$href"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="db:link"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="db:productname">
  <span class="productname">
    <xsl:apply-templates/>
  </span>

  <xsl:variable name="linkgroup"
		select="key('rdfs:label',.,$allrdf)[rdf:type/@rdf:resource='http://norman.walsh.name/knows/taxonomy#LinkGroup'][1]"/>

  <xsl:if test="$linkgroup">
    <xsl:variable name="link"
		  select="concat('/knows/what/', $linkgroup/rdfs:label)"/>

    <a href="{$link}" title="Links: {$linkgroup/rdfs:label}">
      <img border="0" src="/graphics/linkgroup.gif" alt="[L]"/>
    </a>
  </xsl:if>
</xsl:template>

<xsl:template match="db:wikipedia">
  <xsl:variable name="page"
		select="if (@page) then @page else string(.)"/>

  <xsl:variable name="t1" select="translate($page,'_',' ')"/>
  <xsl:variable name="t2" select="replace($t1,'%2[cC]',',')"/>
  <xsl:variable name="t3" select="replace($t2,'%28','(')"/>
  <xsl:variable name="t4" select="replace($t3,'%29',')')"/>

  <xsl:variable name="title" select="$t4"/>

  <a href="http://en.wikipedia.org/wiki/{encode-for-uri($page)}"
     title="Wikipedia: {$title}">
    <xsl:apply-templates/>
  </a>
</xsl:template>

<xsl:template match="foaf:name">
  <xsl:variable name="allFriends" select="key('foaf:names', ., $allrdf)"/>

  <xsl:variable name="displayName" as="xs:string">
    <xsl:choose>
      <xsl:when test="@role = 'fullname'">
	<xsl:value-of select="$allFriends/foaf:name"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$allFriends/foaf:firstName"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:choose>
    <xsl:when test="count($allFriends) != 1">
      <xsl:message>
	<xsl:text>WARNING: </xsl:text>
	<xsl:value-of select="count($allFriends)"/>
	<xsl:text> matches for foaf:name="</xsl:text>
	<xsl:value-of select="."/>
	<xsl:text>"</xsl:text>
      </xsl:message>
      <span class="foafName">
	<xsl:apply-templates/>
      </span>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
	<xsl:when test="$allFriends/foaf:weblog">
	  <a href="{$allFriends/foaf:weblog/@rdf:resource}">
	    <span class="foafName">
	      <xsl:value-of select="$displayName"/>
	    </span>
	  </a>
	</xsl:when>
	<xsl:otherwise>
	  <span class="foafName">
	    <xsl:value-of select="$displayName"/>
	  </span>
	</xsl:otherwise>
      </xsl:choose>
      <a href="{$allFriends/@rdf:about}"> <!-- onclick='return showLinkGroup("{$link}")'> -->
	<img border="0" src="/graphics/linkgroup.gif" alt="[L]"/>
      </a>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="foaf:nick">
  <xsl:variable name="allFriends" select="key('foaf:nicks', ., $allrdf)"/>

  <xsl:variable name="displayName" as="xs:string">
    <xsl:choose>
      <xsl:when test="@role = 'fullname'">
	<xsl:value-of select="$allFriends/foaf:name"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$allFriends/foaf:firstName"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:choose>
    <xsl:when test="count($allFriends) != 1">
      <xsl:message>
	<xsl:text>WARNING: </xsl:text>
	<xsl:value-of select="count($allFriends)"/>
	<xsl:text> matches for foaf:name="</xsl:text>
	<xsl:value-of select="."/>
	<xsl:text>"</xsl:text>
      </xsl:message>
      <span class="foafNick">
	<xsl:apply-templates/>
      </span>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
	<xsl:when test="$allFriends/foaf:weblog">
	  <a href="{$allFriends/foaf:weblog/@rdf:resource}">
	    <span class="foafName">
	      <xsl:value-of select="$displayName"/>
	    </span>
	  </a>
	</xsl:when>
	<xsl:otherwise>
	  <span class="foafName">
	    <xsl:value-of select="$displayName"/>
	  </span>
	</xsl:otherwise>
      </xsl:choose>
      <a href="{$allFriends/@rdf:about}"> <!-- onclick='return showLinkGroup("{$link}")'> -->
	<img border="0" src="/graphics/linkgroup.gif" alt="[L]"/>
      </a>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- ====================================================================== -->
<!-- Sidebar mode -->

<!-- default is to output *nothing* -->

<xsl:template match="*" mode="sidebar">
  <xsl:apply-templates mode="sidebar"/>
</xsl:template>

<xsl:template match="text()|comment()|processing-instruction()"
	      mode="sidebar"/>

<xsl:template match="processing-instruction('subject-feeds')" priority="10"
	      mode="sidebar">
  <div class="feeds">
    <h3>Subject feeds</h3>
    <ul>
      <xsl:for-each
	  select="key('types','http://norman.walsh.name/knows/taxonomy#Topic',$allrdf)">
	<xsl:sort select="skos:prefLabel" order="ascending"/>
	<xsl:if test="t:feed and skos:broader">
	  <li>
	    <a href="/atom/{t:feed}.xml">
	      <xsl:value-of select="skos:prefLabel"/>
	    </a>
	  </li>
	</xsl:if>
      </xsl:for-each>
    </ul>
  </div>
</xsl:template>

</xsl:stylesheet>
