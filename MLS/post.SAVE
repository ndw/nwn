xquery version "1.0-ml";

import module namespace nwn="http://norman.walsh.name/ns/modules/utils"
       at "nwn.xqy";

declare namespace c="http://www.w3.org/ns/xproc-step";
declare namespace db="http://docbook.org/ns/docbook";
declare namespace dc="http://purl.org/dc/elements/1.1/";
declare namespace etc="http://norman.walsh.name/ns/etc";
declare namespace mldb="http://norman.walsh.name/ns/metadata";
declare namespace patom="http://purl.org/atom/ns#";
declare namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare namespace tax="http://norman.walsh.name/ns/taxonomy";

declare default function namespace "http://www.w3.org/2005/xpath-functions";

declare option xdmp:mapping "false";

declare variable $taxonomy := doc("/production/etc/taxonomy.xml");

declare variable $posturi  := xdmp:get-request-field('uri');
declare variable $lmdate as xs:dateTime
  := if (xdmp:get-request-field("lmdate"))
     then xs:dateTime(xdmp:get-request-field("lmdate"))
     else current-dateTime();

declare variable $type   := xdmp:get-request-header('Content-Type');
declare variable $format
  := if ($type = 'application/xml' or ends-with($type, '+xml') or ends-with($posturi, ".xml"))
     then "xml"
     else if (contains($type, "text/") or ends-with($posturi, ".txt"))
          then "text"
          else "binary";
declare variable $body := xdmp:get-request-body($format);

declare function local:patch-metadata($essay as element(db:essay)) as element(db:essay) {
  let $pubdate := string($essay/db:info/db:pubdate)
  let $pubdt
    := if (string-length($pubdate) = 7)
       then concat($pubdate, "-01T12:00:00Z")
       else if ($pubdate castable as xs:dateTime)
            then $pubdate
            else concat($pubdate,"T12:00:00Z")
  let $info
    := <info xmlns="http://docbook.org/ns/docbook">
         <mldb:id>
           { if ($essay/db:info/db:volumenum)
             then
               concat($essay/db:info/db:volumenum,",",$essay/db:info/db:issuenum)
             else
               string($essay/db:info/db:biblioid)
           }
         </mldb:id>
         { if ($pubdt castable as xs:dateTime)
           then
             <mldb:pubdate>
               { $pubdt }
             </mldb:pubdate>
           else
             xdmp:log(concat("Cannot cast ", $pubdt, " as a dateTime"))
         }
         <mldb:updated>
           { $lmdate }
         </mldb:updated>
         { nwn:extract-topics($essay) }
         { nwn:extract-subjects($essay) }
         { nwn:extract-geo($essay) }
         { $essay/db:info/node() }
       </info>
  return
    <essay xmlns="http://docbook.org/ns/docbook">
      { $essay/namespace::* }
      { $essay/@* }
      { for $node in $essay/node()
        return
          if ($node/self::db:info)
          then $info
          else $node
      }
    </essay>
};

declare function local:invalid($doc as element(db:essay)) as xs:string? {
  let $uri     := string(/etc:host-config/etc:essay-validator)
  let $opts    := <options xmlns="xdmp:http">
                    <data>{xdmp:quote($doc)}</data>
                  </options>
  let $results := xdmp:http-post($uri, $opts)
  let $code    := string($results[1]/*:code)
  let $xml     := if ($code = "200") then xdmp:unquote($results[2]) else <c:errors/>
  let $trace   := if ($code = "200" and $xml/c:success)
                  then ()
                  else (xdmp:log($uri),xdmp:log($results))
  let $xmlok   := not(empty($xml/c:success))
  let $titleok := not(string($doc/db:info/db:title) eq "???")
  let $absok   := not(string($doc/db:info/db:abstract) eq "???")
  let $volok   := empty($doc/db:info/db:volumenum)
                  or $doc/db:info/db:volumenum castable as xs:positiveInteger
  let $issok   := empty($doc/db:info/db:issuenum)
                  or $doc/db:info/db:issuenum castable as xs:positiveInteger
  let $dupid   := for $p in $doc//db:para[not(ancestor::db:info)]
                  let $id := $p/@xml:id
                  return
                    if ($p/@xml:id and count($doc//db:para[@xml:id = $id]) != 1)
                    then $id else ()
  let $paraok  := not($doc//db:para[not(@xml:id) and not(ancestor::db:info)]) and empty($dupid)
  let $mldbok  := empty($doc/db:info/mldb:*)
  let $metaok  := local:validmeta($doc/db:info/dc:subject)
  let $valid   := $xmlok and $titleok and $absok and $volok and $issok and $paraok and $metaok
  let $message := if (not($xmlok)) then "Not an XML-valid essay"
                  else if (not($titleok)) then "Title is not valid"
                  else if (not($absok)) then "Abstract is not valid"
                  else if (not($volok)) then "Volume number is not valid"
                  else if (not($issok)) then "Issue number is not valid"
                  else if (not($paraok)) then "There's a para without an xml:id or a dup xml:id"
                  else if (not($mldbok)) then "db:info contains mldb:*"
                  else if (not($metaok)) then "Metadata is not valid"
                  else ""
  return
    if (not($valid))
    then
      (xdmp:log(concat("Not valid: ", $message)), $message)
    else
      ()
};

declare function local:validmeta($subjects as element(dc:subject)*) as xs:boolean {
  if (empty($subjects))
  then
    false()
  else
    let $invalid :=
      for $subj in $subjects
      let $name := substring-after($subj/@rdf:resource, "#")
      return
        if ($taxonomy//tax:*[local-name(.) = $name]) then () else $name
    return
      empty($invalid)
};

let $Z      := xs:dayTimeDuration("PT0H")
let $nowz   := adjust-dateTime-to-timezone(current-dateTime(), $Z)
let $tstamp := format-dateTime($nowz, "[Y0001]-[M01]-[D01]/[H01]-[m01]-[s01]")

let $bibid  := $body/db:essay/db:info/db:biblioid
                     [@class='uri'and starts-with(.,'http://norman.walsh.name/')][1]
let $uri    := if (not(empty($bibid)) and starts-with($posturi,"/pub/"))
               then
                 concat(substring-after($bibid, 'norman.walsh.name'), ".xml")
               else
                 $posturi

let $this   := concat("/versions/", $tstamp, $uri)
let $stage  := concat("/staging", $uri)

let $tcoll  := "http://norman.walsh.name/ns/collections/versions"
let $coll   := "http://norman.walsh.name/ns/collections/staging"
let $essay as xs:boolean := $format = "xml" and ($body/db:essay)
let $comment as xs:boolean := $format = "xml" and $body/patom:entry
let $wfxml as xs:boolean := $format ne "xml" or $body/*
let $extrac := (if ($essay)
                then "http://norman.walsh.name/ns/collections/essay"
                else (),
                if ($essay and contains($uri, "/itinerary/"))
                then "http://norman.walsh.name/ns/collections/itinerary"
                else (),
                if ($comment)
                then
                  ("http://norman.walsh.name/ns/collections/comment",
                   if (ends-with($this, ".rej"))
                   then "http://norman.walsh.name/ns/collections/comment/rejected"
                   else "http://norman.walsh.name/ns/collections/comment/accepted")
                else ())
let $notvalid := if ($essay) then local:invalid($body/db:essay) else ()
let $doc    := if ($essay)
               then
                 local:patch-metadata($body/db:essay)
               else $body

let $perms := (xdmp:permission("weblog-reader", "read"),
               xdmp:permission("weblog-editor", "read"),
               xdmp:permission("weblog-editor", "update"))

return
  if ($wfxml and empty($notvalid))
  then
    (xdmp:document-insert($this, $doc, (), ($tcoll, $extrac)),
     xdmp:document-insert($stage, $doc, ($perms), ($coll, $extrac)),
     <success>
       <uri>{$stage}</uri>
       <type>{$type}</type>
       <format>{$format}</format>
       <this>{$this}</this>
     </success>)
  else
    (xdmp:set-response-code(400, concat("Invalid essay: ", $notvalid)),
     <fail>
       <uri>{$stage}</uri>
       <type>{$type}</type>
       <format>{$format}</format>
       <this>{$this}</this>
       <message>{$notvalid}</message>
     </fail>)
